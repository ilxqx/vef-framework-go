package build_info

import (
	"bytes"
	"context"
	"fmt"
	"go/format"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
	"time"

	"github.com/ilxqx/vef-framework-go/constants"
	"github.com/ilxqx/vef-framework-go/datetime"
	"github.com/ilxqx/vef-framework-go/monitor"
)

type buildInfoData struct {
	monitor.BuildInfo

	Package string
}

const buildInfoTemplate = `// Code generated by vef-cli. DO NOT EDIT.

package {{.Package}}

import "github.com/ilxqx/vef-framework-go/monitor"

// BuildInfo contains build information for the application.
var BuildInfo = &monitor.BuildInfo{
	AppVersion: "{{.AppVersion}}",
	BuildTime:  "{{.BuildTime}}",
	GitCommit:  "{{.GitCommit}}",
}
`

// Generate creates a build_info.go file with version information.
func Generate(outputPath, packageName string) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	info := buildInfoData{
		BuildInfo: monitor.BuildInfo{
			AppVersion: getVersion(ctx),
			BuildTime:  datetime.Now().String(),
			GitCommit:  getCommit(ctx),
		},
		Package: packageName,
	}

	tpl, err := template.New("buildinfo").Parse(buildInfoTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}

	var buf bytes.Buffer
	if err := tpl.Execute(&buf, info); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("failed to format generated code: %w", err)
	}

	dir := filepath.Dir(outputPath)
	if dir != constants.Dot && dir != constants.Empty {
		if err := os.MkdirAll(dir, 0o755); err != nil {
			return fmt.Errorf("failed to create output directory: %w", err)
		}
	}

	if err := os.WriteFile(outputPath, formatted, 0o644); err != nil {
		return fmt.Errorf("failed to write file: %w", err)
	}

	return nil
}

// getVersion returns the git version tag, or "dev" if not in a git repository.
func getVersion(ctx context.Context) string {
	cmd := exec.CommandContext(ctx, "git", "describe", "--tags", "--always", "--dirty")

	output, err := cmd.Output()
	if err != nil {
		return "dev"
	}

	return strings.TrimSpace(string(output))
}

func getCommit(ctx context.Context) string {
	cmd := exec.CommandContext(ctx, "git", "rev-parse", "HEAD")

	output, err := cmd.Output()
	if err != nil {
		return "none"
	}

	return strings.TrimSpace(string(output))
}
