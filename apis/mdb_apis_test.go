package apis_test

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/dbfixture"

	"github.com/ilxqx/vef-framework-go/config"
	"github.com/ilxqx/vef-framework-go/constants"
	"github.com/ilxqx/vef-framework-go/internal/database"
	"github.com/ilxqx/vef-framework-go/internal/orm"
	"github.com/ilxqx/vef-framework-go/testhelpers"
)

// runAllAPITests executes all API test suites on the given database configuration.
func runAllAPITests(t *testing.T, ctx context.Context, dsConfig *config.DatasourceConfig) {
	// Create database connection
	db, err := database.New(dsConfig)
	require.NoError(t, err)

	defer func() {
		// Close the database connection after all tests are completed
		if err := db.Close(); err != nil {
			t.Logf("Error closing database connection for %s: %v", dsConfig.Type, err)
		}

		t.Logf("All API tests completed for %s", dsConfig.Type)
	}()

	// Setup test data using fixtures
	setupTestFixtures(t, ctx, db, dsConfig.Type)

	ormDb := orm.New(db)

	// Create FindAll Suite
	findAllSuite := &FindAllTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create FindPage Suite
	findPageSuite := &FindPageTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create FindOne Suite
	findOneSuite := &FindOneTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create FindOptions Suite
	findOptionsSuite := &FindOptionsTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create FindTree Suite
	findTreeSuite := &FindTreeTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create FindTreeOptions Suite
	findTreeOptionsSuite := &FindTreeOptionsTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create Suite
	createSuite := &CreateTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}
	createManySuite := &CreateManyTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create Update Suite
	updateSuite := &UpdateTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}
	updateManySuite := &UpdateManyTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create Delete Suite
	deleteSuite := &DeleteTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}
	deleteManySuite := &DeleteManyTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create Export Suite
	exportSuite := &ExportTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	// Create Import Suite
	importSuite := &ImportTestSuite{
		BaseSuite{
			ctx:    ctx,
			db:     ormDb,
			dbType: dsConfig.Type,
		},
	}

	t.Run("TestFindAll", func(t *testing.T) {
		suite.Run(t, findAllSuite)
	})

	t.Run("TestFindPage", func(t *testing.T) {
		suite.Run(t, findPageSuite)
	})

	t.Run("TestFindOne", func(t *testing.T) {
		suite.Run(t, findOneSuite)
	})

	t.Run("TestFindOptions", func(t *testing.T) {
		suite.Run(t, findOptionsSuite)
	})

	// TODO: SQLite doesn't support recursive CTE with parentheses generated by Bun framework
	// This is a known issue with Bun's SQL generation. Skip these tests for SQLite until Bun fixes it.
	// See: https://github.com/uptrace/bun/issues/xxx (placeholder for issue link)
	if dsConfig.Type != constants.DbSQLite {
		t.Run("TestFindTree", func(t *testing.T) {
			suite.Run(t, findTreeSuite)
		})

		t.Run("TestFindTreeOptions", func(t *testing.T) {
			suite.Run(t, findTreeOptionsSuite)
		})
	} else {
		t.Logf("Skipping FindTree and FindTreeOptions tests for SQLite due to Bun recursive CTE syntax issue")
	}

	t.Run("TestCreate", func(t *testing.T) {
		suite.Run(t, createSuite)
	})

	t.Run("TestCreateMany", func(t *testing.T) {
		suite.Run(t, createManySuite)
	})

	t.Run("TestUpdate", func(t *testing.T) {
		suite.Run(t, updateSuite)
	})

	t.Run("TestUpdateMany", func(t *testing.T) {
		suite.Run(t, updateManySuite)
	})

	t.Run("TestDelete", func(t *testing.T) {
		suite.Run(t, deleteSuite)
	})

	t.Run("TestDeleteMany", func(t *testing.T) {
		suite.Run(t, deleteManySuite)
	})

	t.Run("TestExport", func(t *testing.T) {
		suite.Run(t, exportSuite)
	})

	t.Run("TestImport", func(t *testing.T) {
		suite.Run(t, importSuite)
	})
}

// setupTestFixtures loads test data from fixture files using dbfixture.
func setupTestFixtures(t *testing.T, ctx context.Context, db bun.IDB, dbType constants.DbType) {
	t.Logf("Setting up test fixtures for %s", dbType)

	bunDb, ok := db.(*bun.DB)
	if !ok {
		require.Fail(t, "Could not convert to *bun.DB")
	}

	// Register models
	bunDb.RegisterModel(
		(*TestAuditUser)(nil),
		(*TestUser)(nil),
		(*TestCategory)(nil),
		(*TestCompositePKItem)(nil),
		(*ExportUser)(nil),
		(*ImportUser)(nil),
	)

	// Create fixture loader with template functions
	fixture := dbfixture.New(
		bunDb,
		dbfixture.WithRecreateTables(),
	)

	// Load fixtures from testdata directory
	err := fixture.Load(ctx, os.DirFS("testdata"), "fixture.yaml")
	require.NoError(t, err, "Failed to load fixtures for %s", dbType)

	t.Logf("Test fixtures loaded for %s database", dbType)
}

// TestPostgres runs all API tests against PostgreSQL.
func TestPostgres(t *testing.T) {
	ctx := context.Background()

	// Create a dummy suite for container management
	dummySuite := &suite.Suite{}
	dummySuite.SetT(t)

	// Start PostgreSQL container
	postgresContainer := testhelpers.NewPostgresContainer(ctx, dummySuite)
	defer postgresContainer.Terminate(ctx, dummySuite)

	// Run all API tests
	runAllAPITests(t, ctx, postgresContainer.DsConfig)
}

// TestMySQL runs all API tests against MySQL.
func TestMySQL(t *testing.T) {
	ctx := context.Background()

	// Create a dummy suite for container management
	dummySuite := &suite.Suite{}
	dummySuite.SetT(t)

	// Start MySQL container
	mysqlContainer := testhelpers.NewMySQLContainer(ctx, dummySuite)
	defer mysqlContainer.Terminate(ctx, dummySuite)

	// Run all API tests
	runAllAPITests(t, ctx, mysqlContainer.DsConfig)
}

// TestSQLite runs all API tests against SQLite (in-memory).
func TestSQLite(t *testing.T) {
	ctx := context.Background()

	// Create SQLite in-memory database config
	dsConfig := &config.DatasourceConfig{
		Type: constants.DbSQLite,
	}

	// Run all API tests
	runAllAPITests(t, ctx, dsConfig)
}
